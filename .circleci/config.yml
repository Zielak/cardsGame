# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    docker:
      - image: cimg/node:20.9.0

jobs:
  install:
    executor: my-executor
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          name: Restore cache for all dependencies
          keys:
            - v6-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-

      - run: npm ci

      - run:
          name: Setup some more environment variables
          command: |
            COMMIT_TITLE=$(git log -1 --pretty=%B)
            echo "export COMMIT_TITLE=\"${COMMIT_TITLE}\"" >> "$BASH_ENV"

            if [[ $COMMIT_TITLE =~ ^"chore("[a-z-]+"): release" ]]; then
              echo "is merged release commit"
              echo "export PUBLISH_PLEASE=\"true\"" >> "$BASH_ENV"
            fi

            PACKAGE_VERSION=$(cat package.json | jq -r '.version')
            echo "export PACKAGE_VERSION=\"${PACKAGE_VERSION}\"" >> "$BASH_ENV"

            cp $BASH_ENV bash.env

      - save_cache:
          name: Save cache for all dependencies
          key: v6-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

      - persist_to_workspace:
          root: ~/project
          paths:
            - bash.env
            - node_modules
            - packages/*/node_modules
            - examples/*/node_modules

  build-core:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build whole core
          command: NODE_ENV=production npm run build:core

      - persist_to_workspace:
          root: ~/project
          paths:
            - packages/*/lib

  build-examples:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build examples
          command: NODE_ENV=production npm run build:examples

  test:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Test with coverage (leave cover results for later)
          command: npm run test:ci

      - persist_to_workspace:
          root: ~/project
          paths:
            - coverage

  lint:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Linting
          command: npm run lint

  release-please:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Restore environment variables from previous jobs
          command: cat bash.env >> $BASH_ENV

      - run:
          name: Release & Publish
          command: |
            if [[ -n "$PUBLISH_PLEASE" ]]; then
              echo "is merged release commit, SO LET'S GO"

              npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}

              jq --arg pkg "$PACKAGE_VERSION" '.version = $pkg' lerna.json > lerna.json.tmp
              mv lerna.json.tmp lerna.json

              npx lerna version $PACKAGE_VERSION --sync-workspace-lock --no-git-tag-version --amend --yes
              npx lerna publish from-package --no-push --no-private --yes

              npx release-please github-release \
                --token=$GITHUB_TOKEN \
                --repo-url=Zielak/cardsGame
            else
              echo "is merged feature, update release PR"
              
              npx release-please release-pr \
                --token=$GITHUB_TOKEN \
                --repo-url=Zielak/cardsGame
            fi

  documentation-install:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Install
          working_directory: docs
          command: npm ci

      - persist_to_workspace:
          root: ~/project
          paths:
            - docs/node_modules

  documentation-deploy:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Restore environment variables from previous jobs
          command: cat bash.env >> $BASH_ENV

      - run:
          name: Prepare env vars
          command: |
            if [[ -z "$PUBLISH_PLEASE"  ]]; then
              echo "Not a publish run, deploy to dev"
              SubDomain="dev-"
            fi
            S3_BUCKET="s3://${SubDomain}cardsgame.darekgreenly.com"
            echo "S3_BUCKET = $S3_BUCKET"
            echo "export S3_BUCKET=$S3_BUCKET" >> $BASH_ENV
            echo "export AWS_REGION=eu-central-1" >> $BASH_ENV

      - run:
          name: Build
          working_directory: docs
          command: npm run build

      # whole docs/build directory
      - aws-s3/sync:
          arguments: --delete --cache-control "public, max-age=31536000, immutable"
          aws-region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          from: "docs/build"
          to: "${S3_BUCKET}"

      # index and sitemap with clear cache thing
      - aws-s3/copy:
          arguments: --cache-control "max-age=604800, no-cache"
          from: "docs/build/index.html"
          to: "${S3_BUCKET}/index.html"
      - aws-s3/copy:
          arguments: --cache-control "max-age=604800, no-cache"
          from: "docs/build/sitemap.xml"
          to: "${S3_BUCKET}/sitemap.xml"

      - when:
          condition:
            equal: [<< pipeline.git.branch >>, "development"]
          steps:
            - aws-s3/copy:
                arguments: --cache-control "public, max-age=31536000, immutable"
                from: "docs/dev.robots.txt"
                to: "${S3_BUCKET}/robots.txt"

  coverage:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Send coverage report to Coveralls
          command: npm run coveralls

  sonarcloud:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - sonarcloud/scan

orbs:
  aws-s3: circleci/aws-s3@3.0.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

anchors-filters:
  - &filters-main
    filters:
      branches:
        only: main
  - &filters-branch
    filters:
      branches:
        ignore:
          - main

workflows:
  version: 2

  # only feature branches
  ci:
    jobs:
      - install:
          <<: *filters-branch

      - lint:
          <<: *filters-branch
          requires:
            - install
      - build-core:
          <<: *filters-branch
          requires:
            - install
      - build-examples:
          <<: *filters-branch
          requires:
            - build-core

      - test:
          <<: *filters-branch
          requires:
            - build-core

  # main merges
  merge:
    jobs:
      - install:
          <<: *filters-main
      - documentation-install:
          <<: *filters-main

      - lint:
          <<: *filters-main
          requires:
            - install
      - build-core:
          <<: *filters-main
          requires:
            - install
      - build-examples:
          <<: *filters-main
          requires:
            - build-core

      - test:
          <<: *filters-main
          requires:
            - build-core

      - release-please:
          <<: *filters-main
          requires:
            - build-examples
            - test

      - documentation-deploy:
          <<: *filters-main
          requires:
            - documentation-install
            - release-please
      - sonarcloud:
          <<: *filters-main
          context: SonarCloud
          requires:
            - release-please
      - coverage:
          <<: *filters-main
          requires:
            - release-please
