# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    docker:
      - image: cimg/node:16.4.0
    working_directory: ~/repo

jobs:
  install:
    executor: my-executor
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          name: Restore cache for root dependencies
          keys:
            - v3-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - restore_cache:
          name: Restore cache for server dependencies
          keys:
            - v1-serverDeps-{{ checksum "packages/server/package-lock.json" }}
            - v1-serverDeps-
      - restore_cache:
          name: Restore cache for client dependencies
          keys:
            - v1-clientDeps-{{ checksum "packages/client/package-lock.json" }}
            - v1-clientDeps-
      - restore_cache:
          name: Restore cache for utils dependencies
          keys:
            - v1-utilsDeps-{{ checksum "packages/utils/package-lock.json" }}
            - v1-utilsDeps-

      - run: npm ci
      - run: npx lerna bootstrap
      - run: npx lerna exec npm ci --concurrency 1

      - save_cache:
          name: Save cache for root dependencies
          key: v3-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          name: Cache server dependencies
          key: v1-serverDeps-{{ checksum "packages/server/package-lock.json" }}
          paths:
            - packages/server/node_modules
      - save_cache:
          name: Cache client dependencies
          key: v1-clientDeps-{{ checksum "packages/client/package-lock.json" }}
          paths:
            - packages/client/node_modules
      - save_cache:
          name: Cache utils dependencies
          key: v1-utilsDeps-{{ checksum "packages/utils/package-lock.json" }}
          paths:
            - packages/utils/node_modules

      - run: ls -l packages/utils/node_modules/@cardsgame
      - run: ls -l packages/client/node_modules/@cardsgame
      - run: ls -l packages/server/node_modules/@cardsgame
      - run: ls -l packages/utils/node_modules/@cardsgame

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.
          # This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/repo
          # Must be relative path from root
          paths:
            - node_modules
            - packages/*/lib
            - packages/*/node_modules

  build:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: npm run build
      - run: ls -l packages/utils/node_modules/@cardsgame
      - run: ls -l packages/client/node_modules/@cardsgame
      - run: ls -l packages/server/node_modules/@cardsgame
      - run: ls -l packages/utils/node_modules/@cardsgame
      - persist_to_workspace:
          root: ~/repo
          paths:
            - packages/*/lib

  test:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: npm run test:ci

  test-coveralls:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Test & send coverage report to Coveralls
          command: npm run test:coveralls

  sonarcloud:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - sonarcloud/scan

  linting:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Linting
          command: npm run lint

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1

anchors:
  - &filters-feature-branches
    filters:
      branches:
        ignore:
          - development
          - master
  - &filters-only-development
    filters:
      branches:
        only: /development/
  - &filters-only-master
    filters:
      branches:
        only: /master/
  - &filters-only-version-tag
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

workflows:
  version: 2

  # CI for feature/bugfix branches
  feature-branch:
    jobs:
      - install:
          <<: *filters-feature-branches
      - build:
          <<: *filters-feature-branches
          requires:
            - install
      - test:
          <<: *filters-feature-branches
          requires:
            - build
      - linting:
          <<: *filters-feature-branches
          requires:
            - install

  # CI for development, more reports and stuff
  development-branch:
    jobs:
      - install:
          <<: *filters-only-development
      - build:
          <<: *filters-only-development
          requires:
            - install
      - linting:
          <<: *filters-only-development
          requires:
            - install
      - test-coveralls:
          <<: *filters-only-development
          requires:
            - build
            - linting
      - sonarcloud:
          <<: *filters-only-development
          context: SonarCloud
          requires:
            - build
            - linting

  # Version made locally
  post-release:
    jobs:
      - install:
          <<: *filters-only-version-tag
      - build:
          <<: *filters-only-version-tag
          requires:
            - install
      - linting:
          <<: *filters-only-version-tag
          requires:
            - install

      - test-coveralls:
          <<: *filters-only-version-tag
          requires:
            - build
      - sonarcloud:
          <<: *filters-only-version-tag
          context: SonarCloud
          requires:
            - build
