# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    docker:
      - image: cimg/node:16.13.0

anchors-steps:
  # ignore if it's "chore(release)" commit
  - &cancel-post-release-non-main
    run:
      name: Check if we should run the rest
      command: |
        if [[ `(git show -s --format=%s)` == *"chore(release)"* ]]; then
          echo "cancelling job"
          circleci-agent step halt
        fi

commands:
  create_concatenated_package_lock:
    description: "Concatenate all package-lock.json files recognized by lerna.js into single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: npx lerna ls --parseable --loglevel silent | awk -F cardsGame '{printf "\"%s/package-lock.json\" ", $0}' | xargs cat > << parameters.filename >>

  install_everything:
    description: "Install and bootstrap everything"
    steps:
      # Download and cache dependencies
      - restore_cache:
          name: Restore cache for all dependencies
          keys:
            - v5-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v5-dependencies-

      - run: npm ci
      - run: npm run bootstrap

      - save_cache:
          name: Save cache for all dependencies
          key: v5-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}
          paths:
            - ~/.npm

jobs:
  prepare:
    executor: my-executor
    steps:
      - checkout
      - *cancel-post-release-non-main

      # - run:
      #     name: Install lerna for calculating combined package lock...
      #     command: npm i lerna

      - create_concatenated_package_lock:
          filename: combined-package-lock.txt

      - install_everything

      - run:
          name: Linting
          command: npm run lint

      - run:
          name: Build everything
          command: NODE_ENV=production npm run build

      - run:
          name: Test with coverage (leave cover results for later)
          command: npm run test:ci

        # Persist only on main, for release
      - when:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - persist_to_workspace:
                # Must be an absolute path, or relative path from working_directory.
                # This is a directory on the container which is
                # taken to be the root directory of the workspace.
                root: ~/project
                # Must be relative path from root
                paths:
                  - node_modules
                  - coverage
                  - packages/*/node_modules
                  - examples/*/node_modules
                  - packages/*/lib
                  - packages/*/dist
                  - examples/*/dist

  release-and-publish:
    executor: my-executor
    steps:
      - checkout
      - *cancel-post-release-non-main

      - attach_workspace:
          at: ~/project

      - run:
          name: Release & Publish
          command: |
            git config --global user.email ${GIT_AUTHOR_EMAIL}
            git config --global user.name ${GIT_AUTHOR_NAME}
            npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
            npm run release:ci -- --yes

  coverage:
    executor: my-executor
    steps:
      - checkout
      - *cancel-post-release-non-main
      - attach_workspace:
          at: ~/project

      - run:
          name: Send coverage report to Coveralls
          command: npm run coveralls

  sonarcloud:
    executor: my-executor
    steps:
      - checkout
      - *cancel-post-release-non-main
      - attach_workspace:
          at: ~/project

      - sonarcloud/scan

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1

anchors-filters:
  - &filters-feature-branches
    filters:
      branches:
        ignore:
          - development
          - main
  - &filters-only-development
    filters:
      branches:
        only: development
  - &filters-only-main
    filters:
      branches:
        only: main
      tags:
        ignore: /.*/

workflows:
  version: 2

  # CI for feature/bugfix branches
  feature-branch:
    jobs:
      - prepare:
          <<: *filters-feature-branches

  # CI for development
  development-branch:
    jobs:
      - prepare:
          <<: *filters-only-development

  # Main -> automatic release
  main-branch:
    jobs:
      - prepare:
          <<: *filters-only-main
      - release-and-publish:
          <<: *filters-only-main
          requires:
            - prepare
      - sonarcloud:
          <<: *filters-only-main
          context: SonarCloud
          requires:
            - prepare
      - coverage:
          <<: *filters-only-main
          requires:
            - prepare
