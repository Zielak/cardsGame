# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    docker:
      - image: cimg/node:16.4.0
    working_directory: ~/repo

commands:
  create_concatenated_package_lock:
    description: "Concatenate all package-lock.json files recognized by lerna.js into single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: npx lerna ls --parseable --loglevel silent | awk -F cardsGame '{printf "\"%s/package-lock.json\" ", $0}' | xargs cat > << parameters.filename >>

jobs:
  install:
    executor: my-executor
    steps:
      - checkout

      - run: npm i lerna

      - create_concatenated_package_lock:
          filename: combined-package-lock.txt

      # Download and cache dependencies
      - restore_cache:
          name: Restore cache for all dependencies
          keys:
            - v4-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v4-dependencies-

      - run: npm ci
      - run: npx lerna bootstrap
      - run: npx lerna exec npm ci --concurrency 1

      - save_cache:
          name: Save cache for all dependencies
          key: v4-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}
          paths:
            - ~/.npm

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.
          # This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/repo
          # Must be relative path from root
          paths:
            - node_modules
            - packages/*/node_modules
            - examples/*/node_modules

  build:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: NODE_ENV=production npm run build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - packages/*/lib

  test:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: npm run test:ci

  test-coveralls:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Test & send coverage report to Coveralls
          command: npm run test:coveralls

  sonarcloud:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - sonarcloud/scan

  linting:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Linting
          command: npm run lint

  release-and-publish:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Bump version
          command: |
            git config --global user.email 'builder@darekgreenly.com'
            git config --global user.name 'Greenly Builder'
            npx lerna version
      - run:
          name: Publish
          command: |
            npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
            lerna publish from-git --yes
      - run:
          name: Align development branch with main
          command: |
            git rebase main development
            git push origin development --no-verify

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1

anchors:
  - &filters-feature-branches
    filters:
      branches:
        ignore:
          - development
          - main
  - &filters-only-development
    filters:
      branches:
        only: /development/
  - &filters-only-main
    filters:
      branches:
        only: /main/
  - &filters-only-version-tag
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

workflows:
  version: 2

  # CI for feature/bugfix branches
  feature-branch:
    jobs:
      - install:
          <<: *filters-feature-branches
      - build:
          <<: *filters-feature-branches
          requires:
            - install
      - test:
          <<: *filters-feature-branches
          requires:
            - build
      - linting:
          <<: *filters-feature-branches
          requires:
            - install

  # CI for development, more reports and stuff
  development-branch:
    jobs:
      - install:
          <<: *filters-only-development
      - build:
          <<: *filters-only-development
          requires:
            - install
      - linting:
          <<: *filters-only-development
          requires:
            - install
      - test-coveralls:
          <<: *filters-only-development
          requires:
            - build
            - linting
      - sonarcloud:
          <<: *filters-only-development
          context: SonarCloud
          requires:
            - build
            - linting

  # Main -> automatic release
  main-branch:
    jobs:
      - install:
          <<: *filters-only-main
      - build:
          <<: *filters-only-main
          requires:
            - install
      - linting:
          <<: *filters-only-main
          requires:
            - install
      - test-coveralls:
          <<: *filters-only-main
          requires:
            - build
      - sonarcloud:
          <<: *filters-only-main
          context: SonarCloud
          requires:
            - build

      - release-and-publish:
          <<: *filters-only-main
          requires:
            - test-coveralls

  # After release and publish, push coverage and code analysis for tag
  post-release:
    jobs:
      - install:
          <<: *filters-only-version-tag

      - test-coveralls:
          <<: *filters-only-version-tag
          requires:
            - install
      - sonarcloud:
          <<: *filters-only-version-tag
          context: SonarCloud
          requires:
            - install
