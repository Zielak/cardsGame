# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    docker:
      - image: cimg/node:16.13.0

commands:
  install_everything:
    description: "Install and bootstrap everything"
    steps:
      # Download and cache dependencies
      - restore_cache:
          name: Restore cache for all dependencies
          keys:
            - v6-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - v6-dependencies-

      # bootstraps right after installation
      - run: npm ci

      - save_cache:
          name: Save cache for all dependencies
          key: v6-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

jobs:
  prepare:
    executor: my-executor
    steps:
      - checkout

      - install_everything

      - run:
          name: Linting
          command: npm run lint

      - run:
          name: Build everything
          command: NODE_ENV=production npm run build:ci

      - run:
          name: Test with coverage (leave cover results for later)
          command: npm run test:ci

      # `main` branch, persist everything for release
      - when:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - persist_to_workspace:
                # Must be an absolute path, or relative path from working_directory.
                # This is a directory on the container which is
                # taken to be the root directory of the workspace.
                root: ~/project
                # Must be relative path from root
                paths:
                  - node_modules
                  - coverage
                  - packages/*/node_modules
                  - examples/*/node_modules
                  - packages/*/lib
                  - packages/*/dist
                  - examples/*/dist

      # `development` branch, persist mainly for coveralls
      - when:
          condition:
            equal: ["development", << pipeline.git.branch >>]
          steps:
            - persist_to_workspace:
                root: ~/project
                paths:
                  - node_modules
                  - coverage

  release-and-publish:
    executor: my-executor
    steps:
      - checkout

      - attach_workspace:
          at: ~/project

      - run:
          name: Release & Publish
          command: |
            git config --global user.email ${GIT_AUTHOR_EMAIL}
            git config --global user.name ${GIT_AUTHOR_NAME}
            npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
            npm run release:ci -- --yes

  documentation-deploy:
    executor: my-executor
    parameters:
      env:
        type: enum
        enum: ["dev", "prod"]
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Prepare env vars
          command: |
            if [[ << parameters.env >> == "dev" ]]; then
              SubDomain="dev."
            fi
            echo 'export S3_BUCKET=s3://${SubDomain}cardsgame.darekgreenly.com' >> $BASH_ENV
            echo 'export AWS_REGION=eu-central-1' >> $BASH_ENV

      - run:
          name: Install & build
          working_directory: docs
          command: |
            npm ci
            npm run build

      # whole docs/build directory
      - aws-s3/sync:
          arguments: --delete --cache-control "public, max-age=31536000, immutable"
          aws-region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          from: docs/build
          to: $S3_BUCKET

      # index and sitemap with clear cache thing
      - aws-s3/copy:
          arguments: --cache-control "max-age=604800, no-cache"
          from: docs/build/index.html
          to: $S3_BUCKET/index.html
      - aws-s3/copy:
          arguments: --cache-control "max-age=604800, no-cache"
          from: docs/build/sitemap.xml
          to: $S3_BUCKET/sitemap.xml

      - when:
          condition:
            equal: [<< parameters.env >>, "dev"]
          steps:
            - aws-s3/copy:
                arguments: --cache-control "public, max-age=31536000, immutable"
                from: docs/dev.robots.txt
                to: $S3_BUCKET/robots.txt

  coverage:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Send coverage report to Coveralls
          command: npm run coveralls

  sonarcloud:
    executor: my-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - sonarcloud/scan

orbs:
  aws-s3: circleci/aws-s3@3.0.0
  sonarcloud: sonarsource/sonarcloud@1.0.1

anchors-filters:
  - &filters-feature-branches
    filters:
      branches:
        ignore:
          - development
          - main
  - &filters-only-development
    filters:
      branches:
        only: development
  - &filters-only-main
    filters:
      branches:
        only: main
      tags:
        ignore: /.*/

workflows:
  version: 2

  # CI for feature/bugfix branches
  feature-branch:
    jobs:
      - prepare:
          <<: *filters-feature-branches

  # CI for development
  development-branch:
    jobs:
      - prepare:
          <<: *filters-only-development

      - documentation-deploy:
          <<: *filters-only-development
          env: dev
          requires:
            - prepare
      - sonarcloud:
          <<: *filters-only-development
          context: SonarCloud
          requires:
            - prepare
      - coverage:
          <<: *filters-only-development
          requires:
            - prepare

  # Main -> automatic release
  main-branch:
    jobs:
      - prepare:
          <<: *filters-only-main
      - release-and-publish:
          <<: *filters-only-main
          requires:
            - prepare

      - documentation-deploy:
          <<: *filters-only-main
          env: prod
          requires:
            - prepare
      - sonarcloud:
          <<: *filters-only-main
          context: SonarCloud
          requires:
            - prepare
      - coverage:
          <<: *filters-only-main
          requires:
            - prepare
